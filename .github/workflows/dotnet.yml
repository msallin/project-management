name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Install report generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Restore dependencies
      run: dotnet restore ProjectManagement.sln
    - name: Build
      run: dotnet build --no-restore ProjectManagement.sln
    - name: Test with coverage
      run: |
        mkdir -p TestResults/coverage
        dotnet test ProjectManagement.sln --no-build --logger "trx;LogFileName=testresults.trx" \
          --results-directory TestResults \
          /p:CollectCoverage=true \
          /p:CoverletOutput=TestResults/coverage/ \
          /p:CoverletOutputFormat=cobertura
    - name: Generate coverage report
      run: >-
        ~/.dotnet/tools/reportgenerator -reports:TestResults/coverage/coverage.cobertura.xml
        -targetdir:coveragereport -reporttypes:Html;MarkdownSummary
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
    - name: Coverage PR comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: coveragereport/Summary.md
    - name: Enforce minimum coverage
      if: always()
      run: |
        line_rate=$(grep -o 'line-rate="[0-9.]*"' TestResults/coverage/coverage.cobertura.xml | head -n1 | cut -d'"' -f2)
        coverage=$(awk "BEGIN {print ${line_rate}*100}")
        echo "Line coverage: ${coverage}%"
        awk -v cov=${coverage} 'BEGIN { if (cov < 90) exit 1 }'

